#!/usr/bin/env node

const PASSPHRASE = 'mudlmudl'
const COMMANDS = [
  'interfaces',
  'tc',
  'dhcpd',
  'dhcpd_devices',
  'iptables',
  'hostapd'
]

const Handlebars = require('../src/handlebars')
const YAML = require('yamljs')
const { readFileSync } = require('fs')
const { resolve } = require('path')

// The first byte, 0x02, means that the address is locally administered. The last four bits should
// be set to 0x0 so that addresses for the Basic Service Sets can be easily derived by hostapd, e.g.
// 02:3a:35:d0:24:61, :62, :63, :64 etc.
const mac = '02:3a:35:d0:24:60'

function createContext(profiles) {
  const interfacesContext = require('../src/interfaces')(mac, profiles)
  const { interfaces } = interfacesContext

  let context = {
    interfaces: interfacesContext,
    tc: require('../src/tc')(profiles)
  }

  context.dhcpd = require('../src/dhcpd')(interfaces)
  context.dhcpd_devices = require('../src/dhcpd_devices')(interfaces)
  context.iptables = require('../src/iptables')(interfaces)
  context.hostapd = require('../src/hostapd')(mac, PASSPHRASE, profiles)

  return context
}

const program = require('commander')

program.option(
  '-p, --profiles [path]',
  'The profiles definition file [/path/to/jenny/profiles.yaml]',
  resolve(__dirname, '../profiles.yaml')
)

COMMANDS.forEach(command =>
  program.command(command)
    .action(() => {
      const profiles = YAML.load(program.profiles).profiles
      const context = createContext(profiles)
      const template = Handlebars.compile(readFileSync(
        resolve(__dirname, '../templates', `${command}.hbs`),
        'UTF-8'
      ))

      console.log(template(context[command]))
    })
)

program.parse(process.argv)
